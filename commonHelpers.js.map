{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\n\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nfunction addLeadingZero(value) {\n  return value < 10 ? `0${value}` : value;\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const datetimePicker = document.getElementById(\"datetime-picker\");\n  const startTimerBtn = document.getElementById(\"start-timer\");\n\n  const currentDate = new Date();\n  const selectedDate = new Date(datetimePicker.value);\n  if (selectedDate > currentDate) {\n    startTimerBtn.disabled = false;\n  } else {\n    startTimerBtn.disabled = true;\n  }\n\n  flatpickr(datetimePicker, {\n    enableTime: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      const selectedDate = selectedDates[0];\n      if (selectedDate > new Date()) {\n        startTimerBtn.disabled = false;\n      } else {\n        iziToast.error({\n          title: \"Error\",\n          message: \"Please choose a date in the future\",\n        });\n        startTimerBtn.disabled = true;\n      }\n    },\n  });\n\n  startTimerBtn.addEventListener(\"click\", () => {\n    const selectedDate = new Date(datetimePicker.value);\n    const countdownInterval = setInterval(() => {\n      const currentDate = new Date();\n      const difference = selectedDate - currentDate;\n\n      if (difference <= 0) {\n        clearInterval(countdownInterval);\n        iziToast.success({\n          title: \"Success\",\n          message: \"Countdown Timer Finished\",\n        });\n        return;\n      }\n\n      const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n\n      document.querySelector(\"[data-days]\").textContent = addLeadingZero(days);\n      document.querySelector(\"[data-hours]\").textContent = addLeadingZero(hours);\n      document.querySelector(\"[data-minutes]\").textContent = addLeadingZero(minutes);\n      document.querySelector(\"[data-seconds]\").textContent = addLeadingZero(seconds);\n    }, 1000);\n\n    startTimerBtn.disabled = true;\n  });\n});"],"names":["addLeadingZero","value","datetimePicker","startTimerBtn","currentDate","flatpickr","selectedDates","iziToast","selectedDate","countdownInterval","difference","days","hours","minutes","seconds"],"mappings":"kLAMA,SAASA,EAAeC,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,CAAK,GAAKA,CACpC,CAEA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAMC,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAgB,SAAS,eAAe,aAAa,EAErDC,EAAc,IAAI,KACH,IAAI,KAAKF,EAAe,KAAK,EAC/BE,EACjBD,EAAc,SAAW,GAEzBA,EAAc,SAAW,GAG3BE,EAAUH,EAAgB,CACxB,WAAY,GACZ,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQI,EAAe,CACAA,EAAc,CAAC,EACjB,IAAI,KACrBH,EAAc,SAAW,IAEzBI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACnB,CAAS,EACDJ,EAAc,SAAW,GAE5B,CACL,CAAG,EAEDA,EAAc,iBAAiB,QAAS,IAAM,CAC5C,MAAMK,EAAe,IAAI,KAAKN,EAAe,KAAK,EAC5CO,EAAoB,YAAY,IAAM,CAE1C,MAAMC,EAAaF,EADC,IAAI,KAGxB,GAAIE,GAAc,EAAG,CACnB,cAAcD,CAAiB,EAC/BF,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,0BACnB,CAAS,EACD,MACD,CAED,MAAMI,EAAO,KAAK,MAAMD,GAAc,IAAO,GAAK,GAAK,GAAG,EACpDE,EAAQ,KAAK,MAAOF,GAAc,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EAC1EG,EAAU,KAAK,MAAOH,GAAc,IAAO,GAAK,KAAQ,IAAO,GAAG,EAClEI,EAAU,KAAK,MAAOJ,GAAc,IAAO,IAAO,GAAI,EAE5D,SAAS,cAAc,aAAa,EAAE,YAAcV,EAAeW,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcX,EAAeY,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcZ,EAAea,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcb,EAAec,CAAO,CAC9E,EAAE,GAAI,EAEPX,EAAc,SAAW,EAC7B,CAAG,CACH,CAAC"}